@using BlazorWebAssymblyWeb3.Client.Components.Global
@using BlazorWebAssymblyWeb3.Client.Data
@using BlazorWebAssymblyWeb3.Client.Services
@using BlazorWebAssymblyWeb3.Server;
@using BlazorWebAssymblyWeb3.Shared.Forms;
@using Newtonsoft.Json
@using System.Globalization
@using System.Text.Json

@inject IJSRuntime _jsRuntime;
@inject StateContainer _stateContainer;
@inject HttpClient _httpClient;
@inject AlertMessageService _alertMessageService;
<style>
    input[type=radio] {
        opacity: 0;
    }

    .dt {
        font-size: 1rem;
    }

    .market-orders {
        width: 420px;
    }
</style>

<div class="modal market-orders column gap--">
        <h2>Sell Asset</h2>
        <div class="token-balance row-sb" style="width: 100%;">
            <div class="row gap">
            <img height="35" src="@($"https://todai.world/images/{NFT.ContractAddress}/{NFT.TokenId}")" alt="">
                <div class="column" style="margin-top: -5px;">
                    <div class="row" style="gap:2px">@NFT.Data.name </div>
                    <p>YokaiChain</p>
                </div>
            </div>
            <div class="column" style="text-align: right;">
                @* <div>X FTM</div>
                <p style="text-align: right;"> Asset Floor</p> *@
            </div>
        </div>
        <div class="row gap--">
            <div class="dt">Instant Sale</div> 
            @* <div>Auction Sale</div> *@
        </div>
        <div class="input-price row-sb gap-" style="margin-top: 2px;">
            <div>Set Price</div>
            <div class="row gap">
            <input type="text" placeholder="0.0" @oninput="inputPrice"/>
                <div style="font-size: 0.9rem;">FTM</div>
            </div>
        </div>
        <div class="column" style="font-size: 1rem;">             
        @* <div class="row-sb">
           <p>Service fee</p>
            <div>3%</div>
        </div> *@
         @if(royaltyData != null)
         {
            <div class="row-sb">
               <p>Artist Royalty</p>
                <div class="row" style="gap: 2px;">
                    <p style="font-size: 13px; margin-bottom:-3px">$ @royaltyFeeText &nbsp;</p>@royaltyData.Royalty%
                </div>
            </div>
         }
        <div class="row-sb">
           <p>You will receive</p>
             <div class="row" style="gap: 2px;">
                <p style="font-size: 13px; margin-bottom:-3px">$ @priceWithFeeText &nbsp;</p>@string.Format("{0:N2}",priceWithFee) FTM
            </div>
        </div>
   </div>
        @* <div class="row-- dt" style="font-size:0.96rem;gap: 16px;">
            <div>Expiration </div>
                <label for="24" style="gap: 4px;">
                    <input type="radio" id="24" value="1" name="duration"@onchange="() => durationChange(1)"/>
                    <span>24h</span>
                </label>
                <label for="7" style="gap: 4px;">
                    <input type="radio" id="7" value="2" name="duration" @onchange="() => durationChange(2)" />
                    <span>7 days</span>
                </label>
                <label for="14" style="gap: 4px;">
                    <input type="radio" id="14" value="3" name="duration" @onchange="() => durationChange(3)" />
                    <span>14 days</span>
                </label>

                <label for="28" style="gap: 4px;">
                    <input type="radio" id="28" value="4" name="duration" @onchange="() => durationChange(4)" />
                    <span>28 days</span>
                </label>
        </div> *@
        @*<div class="column" style="font-size: 0.96rem; padding:0px 4px">
        <div class="row-sb">
        <p>Service fees</p>
        <div>3%</div>
        </div>
        <div class="row-sb">
        <p>Royalties</p>
        <div>6%</div>
        </div>
        <div class="row-sb">
        <p>You will earn</p>
        <div>120 FTM</div>
        </div>
        </div>*@
        <span style="margin-bottom: 2px;"></span>

        <div class="" style="margin-bottom:0;">
            <p style="text-align: center; font-size:12px">
                You want to sell <i>@NFT.Data.name</i> for <i>@price FTM </i>
                <img height="13" src="media/whitelisted.svg" alt="">
            </p>
        </div>
        @if (isApproved)
        {
            @if (isTransactionRunning)
            {
                <button class="main-button main-btn-load row gap" disabled style="padding-right: 26px;">
                        <img height="26" src="media/loader.svg"> Listing Asset
                </button>
            }
            else if (isDone)
            {
                <button class="main-button" @onclick="exitConfirm">Continue</button>
            }
            else 
            {
            <button class="main-button" @onclick="ListOfferAsync">List Asset</button>
            }
        }
        else
        { 
            @if (isTransactionRunning)
            {
                <button class="main-button main-btn-load row gap" disabled style="padding-right: 26px;">
                        <img height="26" src="media/loader.svg"> Approving
                </button>
            }
            else
            {
                <button class="main-button" @onclick="ApproveMarketplaceAsync">Approve Asset</button>
            }
        }
</div>
<div class="modal-bg" @onclick="exitConfirm"></div>
@if (confirming)
{
    <Confirmation Display="confirming" Confirm="exitConfirm" Stay="exitStay" />
}
@code {

    [Parameter]
    public Yokai NFT { get; set; }

    [Parameter] 
    public EventCallback<AssetListing> Close { get; set; }

    private double? price = null;
    private double? priceWithFee = 0;
    private DateTimeOffset time;

    private bool isApproved;
    private bool isTransactionRunning;
    private bool confirming;
    private bool isDone;
    private bool wrongInputValue;
    private RoyaltyData royaltyData;
    private AssetListing? listing;

    private void confirmClose() 
    {
        if(!isTransactionRunning)
            confirming = true;
    }
    private async Task exitStay() => confirming = false;
    private async Task exitConfirm()
    {
        if (isTransactionRunning)
            return;
        confirming = false;
        await Close.InvokeAsync(listing);
        //await OnOfferCreated.InvokeAsync(false);
    }

    private async Task inputPrice(ChangeEventArgs newPrice)
    {
        if (newPrice?.Value is null) return;

        var value = newPrice.Value.ToString();
        if (string.IsNullOrWhiteSpace(value)) return;
        if (!double.TryParse(newPrice.Value.ToString(), out var parsedPrice))
        {
            wrongInputValue = true;
            return;
        }

        wrongInputValue = false;
        price = parsedPrice;
        if (price != null && royaltyData?.Royalty != null)
        {
            priceWithFee = price*0.98 - (price * (royaltyData.Royalty/100d));
            priceWithFeeText = string.Format("{0:N2}", (priceWithFee) * _stateContainer.FantomPrice);
            royaltyFeeText = string.Format("{0:N2}", (price * (royaltyData.Royalty / 100d)) * _stateContainer.FantomPrice);
        }

    }

    private string priceWithFeeText;
    private string royaltyFeeText;
    protected override async Task OnParametersSetAsync()
    {
        isApproved = await _jsRuntime.InvokeAsync<bool>("RecoverLib.IsMarketplaceContractApproved", NFT.ContractAddress, NFT.TokenId);
        royaltyData = await _httpClient.GetFromJsonAsync<RoyaltyData>($"Collection/GetRoyalty?collectionAddress={NFT.ContractAddress}");
        if(royaltyData is null)
            royaltyData = new RoyaltyData(0, "");

        priceWithFeeText = string.Format("{0:N2}", (priceWithFee) * _stateContainer.FantomPrice);
        royaltyFeeText = string.Format("{0:N2}", (price * (royaltyData.Royalty / 100d)) * _stateContainer.FantomPrice);
        durationChange(4);
    }

    public async Task ApproveMarketplaceAsync()
    {
        var reference = DotNetObjectReference.Create(this);
        await _jsRuntime.InvokeVoidAsync("RecoverLib.ApproveMarketplaceContractForTokenID", NFT.ContractAddress, NFT.TokenId, reference);
    }

    public async Task ListOfferAsync()
    {
        var reference = DotNetObjectReference.Create(this);
        var orderJson = await _jsRuntime.InvokeAsync<string>("RecoverLib.createOrderFor", NFT.ContractAddress, NFT.TokenId, _stateContainer.CurrentConnectedAddress, price.ToString(), time.ToUnixTimeSeconds(), 100/royaltyData.Royalty, royaltyData.RoyaltyAddress, reference);
    }

    private SeaportOrder order;
    [JSInvokable]
    public void WaitingTransaction(string? pOrderJson)
    {
        if(!string.IsNullOrWhiteSpace(pOrderJson) && !pOrderJson.Equals("Approve", StringComparison.InvariantCultureIgnoreCase)){
            Console.WriteLine(pOrderJson);
            order = JsonConvert.DeserializeObject<SeaportOrder>(pOrderJson);
        }

        isTransactionRunning = true;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task TransactionDone(bool pIsSucess, string pError = "")
    {
        isDone = true;
        isTransactionRunning = false;
        if (pIsSucess)
        {
            _alertMessageService.ShowAlertMessage(AlertMessageService.States.Success, "Your asset has been listed");
            var result = await _httpClient.PostAsJsonAsync("Marketplace/ValidateOrder", order);
            if(result.IsSuccessStatusCode)
                listing = await result.Content.ReadFromJsonAsync<AssetListing>();
        }
        else
            _alertMessageService.ShowAlertMessage(AlertMessageService.States.Error, pError);
    }

    [JSInvokable]
    public async Task ApproveResult(bool pIsSuccess, string pError = "")
    {
        isApproved = pIsSuccess;
        isTransactionRunning = false;
        await InvokeAsync(StateHasChanged);
        if (!pIsSuccess) 
            _alertMessageService.ShowAlertMessage(AlertMessageService.States.Error, pError);
    }

    private void durationChange(int pValue)
    {
        switch(pValue){
            case 1:
                time = DateTime.UtcNow.AddHours(24);
                break;
            case 2:
                time = DateTime.UtcNow.AddDays(7);
                break;
            case 3:
                time = DateTime.UtcNow.AddDays(14);
                break;
            case 4:
                time = DateTime.UtcNow.AddDays(28);
                break;
        }
    }
}