@using BlazorWebAssymblyWeb3.Client.Components.Global
@using BlazorWebAssymblyWeb3.Client.Data
@using BlazorWebAssymblyWeb3.Client.Services
@using BlazorWebAssymblyWeb3.Server;
@using BlazorWebAssymblyWeb3.Shared.Forms
@using MetaMask.Blazor
@using BlazorWebAssymblyWeb3.Client.Components.Marketplace
@inject IJSRuntime _jsRuntime;
@inject StateContainer _stateContainer;
@inject NavigationManager _navManager;
@inject AlertMessageService _alertMessageService;
@inject MetaMaskService _metaMaskService;
@inject Helper _helper;
@inject HttpClient _http;

<style>
    h2 {
        font-size: 17px !important;
    }

    .market-button-edit {
        height: 26px !important;
        font-size: 16px !important;
        font-size: 14px !important;
        padding-bottom: 1px;
    }

    .button-edit {
        background: rgba(255, 255, 255, 0.08);
    }

</style>
<div class="market-item column" style="height: 370px;">
    @* <div class="market-item-header row-sb" style="margin-bottom: 3px;padding: 4px;">
    @if (NFT.Rank != 0)
    {
    <div class="row" >
    <p style="font-size: 0.7rem;margin-right:3px;">RARITY</p>
    <h4>#@NFT.Rank</h4>
    </div>
    }
    <div>@Helper.ToReadableExpirationDate(offerListed.ExpirationDate.Millisecond)</div>
    </div> *@
    <div class="market-item-viewer" @onclick="toAsset">
        <img src="@($"https://todai.world/images/{NFT.ContractAddress}/{NFT.TokenId}")" alt="">
    </div>
    <div class="market-item-footer column" style="gap:6px">
        <div class="row-sb">
            <div class="column" style="gap:2px">
                <div class="row" style="gap: 2px;">
                    <p class="market-item-title">@offerListed.Nft.Name</p>
                </div>
            </div>
        </div>
        <div class="row-sb" style="margin-bottom: 6px;">
            <div class="row gap-c" style="font-size: 16px;font-family:'Roboto'">
                <div class="tooltip-c">
                    <img height="19" src="media/ftm.svg" style="margin-bottom:-2px">
                    <div class="tooltip">
                        FTM (Fantom)
                    </div>
                </div>
                <div class="ftm-gradient">@(offerListed.PriceInt) </div>
            </div>
            <p style="font-size: 12px;opacity: 0.2;font-style: italic;">@dateToString</p>
        </div>
        @if (IsOwnerConnected)
        {
            <button class="market-button-edit button-edit" @onclick="AcceptOffer"> See Offer</button>
        }
        else
        {
            <button class="market-button-edit button-edit" @onclick="CancelOffer"> Cancel Offer </button>
        }


        @* <div class="row gap-c" style="padding-top:12px ; margin-top:6px; border-top:1px solid rgba(255, 255, 255, 0.1)"></div>

        <div class="row gap-c">
        <p style="font-family:'Roboto';font-size: 11px;gap:2px"> Floor Price </p>
        <img height="12" src="media/wftm.svg" alt="">
        <p style="font-family:'Roboto';font-size: 11px;gap:2px"> 30</p>
        </div>
        *@

        @* offer received, accept -> open checkout*@


    </div>


</div>
@if (acceptOffer)
{
    <ReceivedOffer NFT="NFT" Offer="offerListed" OnClose="closeAcceptOffer" />
}
@if (cancelOffer)
{
    <CancelOffer NFT="NFT" OwnOffer="offerListed" Close="CloseCancelOffer" />
}

@code {


    [Parameter]
    public Yokai NFT { get; set; }

    [Parameter]
    public bool IsOwnerConnected { get; set; }

    [Parameter]
    public OfferListed offerListed { get; set; }

    [Parameter]
    public EventCallback OfferDeclined { get; set; }
    private bool IsOfferDeclinedSet => OfferDeclined.HasDelegate;

    private void toAsset() => _navManager.NavigateTo($"{_navManager.BaseUri}asset/{NFT.ContractAddress}/{NFT.TokenId}");

    private bool runningTransaction;
    private bool isApproved;
    private bool confirming;
    private bool isLoading;
    private string parsedTime;
    private DotNetObjectReference<SwapOfferCard>? _currentComponentReference;
    private bool successfulTrade;
    private string state;
    private string Hash;
    private TransactionStatue.ImageState imageState;
    private bool confirmationDisplay = false;
    private string dateToString;


    private bool acceptOffer;
    private bool cancelOffer;

    protected override Task OnInitializedAsync()
    {
        dateToString = Helper.ToReadableExpirationDate(offerListed.ExpirationDate);
        return Task.CompletedTask;
    }

    private void AcceptOffer() => acceptOffer = true;
    private async Task closeAcceptOffer()
    {
        acceptOffer = false;
        await InvokeAsync(StateHasChanged);
    }

    private void CloseCancelOffer(bool Cancelled)
    {
        if (runningTransaction)//|| !IsOwnerConnected
            return;
        cancelOffer = false;

        if (Cancelled)
            offerListed = null;
    }

    private void CancelOffer() => cancelOffer = true;

    private async Task DeclineOffer()
    {
        var guid = await _http.GetStringAsync($"Yokai/GetGuidSignFor?pAddress={_stateContainer.CurrentConnectedAddress}");

        var transaction = await _helper.CreateSignTransactionAndPayload(new Message
            {
                contents = guid
            });

        if (!transaction.IsSuccess) return;

        var favorite = await _http.GetStringAsync($"Marketplace/DeclineOffer?offerId={offerListed.Id}&signatureHash={transaction.Hash}&address={_stateContainer.CurrentConnectedAddress}");
        if (IsOfferDeclinedSet)
            await OfferDeclined.InvokeAsync();
    }

    [JSInvokable]
    public async Task WaitingTransaction()
    {
        runningTransaction = true;
    }

    [JSInvokable]
    public async Task TransactionDone(bool isSuccess, string pError = "")
    {
        runningTransaction = false;
        if (isSuccess)
            _alertMessageService.ShowAlertMessage(AlertMessageService.States.Success, "Listing has been canceled");
        else
            _alertMessageService.ShowAlertMessage(AlertMessageService.States.Error, pError);
    }
}
