@using BlazorWebAssymblyWeb3.Client.Data
@using BlazorWebAssymblyWeb3.Client.Services
@using BlazorWebAssymblyWeb3.Server;

@inject IJSRuntime _jsRuntime;
@inject StateContainer _stateContainer;
@inject NavigationManager _navManager;
@inject AlertMessageService _alertMessageService;

<style>
    h2{
        font-size: 17px !important;
    }
    .market-button-edit{
        height: 25px !important; font-size:16px!important ; border: 1px solid rgba(255, 255, 255, 0.2);
        width: 88% !important;
    }
    .market-item-btn{
        position: absolute;
        bottom: 16px;
        width: 100%;
    }
</style>
<div class="market-item column gap">
    <div class="market-item-header row-sb" style="margin-bottom: 3px;">
        <div class="row">
            <p style="font-size: 0.7rem;margin-right:3px;">RARITY</p>
            <h4>#@NFT.Rank</h4>
        </div>
       <div class="row gap" style="margin-right: 6px;">
            <img height="18" src="media/notfavorite_icon.svg" alt="favorite nft"  >
            @* <img height="20" src="media/more.svg" alt="more"> *@
        </div>
    </div>
    <div class="market-item-viewer" @onclick="toAsset">
        <img src="@($"https://todai.world/images/{NFT.ContractAddress}/{NFT.TokenId}")" alt="">
    </div>
    <div class="market-item-footer column" style="gap:4px">
        <div class="row-sb">
            <div class="column" style="gap:2px">
                <div class="row" style="gap: 2px;">
                  <h2 class="market-item-title">@NFT.Data?.name </h2>
                </div>
            </div>
        </div>
        <div class="row-sb" style="margin-top: 12px;">
            <div class="row-sb" style="font-size: 16px;font-family:'Roboto'; gap:8px">
                @if (AssetListed != null){
                    <p style="margin-top: 1px;">Price</p>
                   <div>@AssetListed?.Price FTM</div> 
                }
                else{
                      <p></p>
                }
            </div>

            @* <div class="column" style="text-align: right;">
                <p style="font-family:'Roboto';font-size: 10px;gap:2px"> Floor 100 FTM </p>
                <p style="font-family:'Roboto';font-size: 10px; gap:2px"> Last  1430 FTM </p>
            </div> *@

        </div>
      

    </div>
      <div class="market-item-btn column gap" style="margin-top: 16px;">
            <button class="button-edit market-button-edit" style="border: none;">Make Offer</button>
            @if (AssetListed != null)
            {
                <button class="button-edit market-button-edit"onclick="@Checkout">Buy</button>
            }
            <button class="button-edit market-button-edit" style="" onclick="@CancelOrder">Cancel</button>
        </div>
</div>
@if (buying)
{
    <CheckoutOffer AssetListed="AssetListed" NFT="NFT" OnClose="CheckoutClose"/>
}
@code {

    [Parameter]
    public AssetListing? AssetListed { get; set; }

    [Parameter]
    public Yokai NFT { get; set; }

    private void toAsset()
    {
        _navManager.NavigateTo($"{_navManager.BaseUri}asset/{NFT.ContractAddress}/{NFT.TokenId}");
    }

    private bool buying;
    private bool runningTransaction;
    public void Checkout()
    {
        buying = true;
    }

    public Task CheckoutClose()
    {
        buying = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

    public async Task CancelOrder()
    {
        var reference = DotNetObjectReference.Create(this);
        await _jsRuntime.InvokeVoidAsync("RecoverLib.cancelOrder", AssetListed.OrderJson, reference);
    }

    [JSInvokable]
    public async Task WaitingTransaction()
    {
        runningTransaction = true;
    }

    [JSInvokable]
    public async Task TransactionDone(bool isSuccess, string pError = "")
    {
        runningTransaction = false;
        if (isSuccess)
            _alertMessageService.ShowAlertMessage(AlertMessageService.States.Success, "Listing has been canceled");
        else
            _alertMessageService.ShowAlertMessage(AlertMessageService.States.Error, pError);
    }
}
